{"version":3,"sources":["components/AddCategorys.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GitExpertApp.js","index.js"],"names":["AddCategorys","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","prototype","PropTypes","func","isRequired","getGifs","category","a","url","encodeURI","fetch","resp","console","log","json","data","gif","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GitExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"oNAGaA,EAAe,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAE7B,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAoBA,OACE,sBAAMC,SAZa,SAACC,GAEpBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAS,IAE7BR,GAAc,SAACS,GAAD,OAAWP,GAAX,mBAA0BO,OACxCN,EAAc,MAKhB,SACE,uBAAOO,KAAK,OAAOC,MAAOT,EAAYU,SAnBhB,SAACP,GAEzBF,EAAcE,EAAEQ,OAAOF,aAsB3BZ,EAAae,UAAY,CACvBd,cAAee,IAAUC,KAAKC,Y,mCCjCnBC,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACfC,EADe,iDACiCC,UACpDH,GAFmB,+DAKFI,MAAMF,GALJ,cAKfG,EALe,OAMrBC,QAAQC,IAAIL,GANS,SAOEG,EAAKG,OAPP,uBAObC,EAPa,EAObA,KACFC,EAAMD,EAAKE,KAAI,SAACC,GAAS,IAAD,EAC5B,MAAO,CACLC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXZ,IAAG,UAAEU,EAAIG,cAAN,aAAE,EAAYC,iBAAiBd,QAZjB,kBAedQ,GAfc,4CAAH,sDCEPO,EAAc,SAAC,GAAoB,IAAlBH,EAAiB,EAAjBA,MAAOZ,EAAU,EAAVA,IAEnC,OACE,sBAAKgB,UAAU,6CAAf,UACE,qBAAKC,IAAKjB,EAAKkB,IAAKN,IACpB,4BAAIA,QCHGO,EAAU,SAAC,GAAkB,IAAhBrB,EAAe,EAAfA,SACxB,ECF0B,SAACA,GAC3B,MAA0BlB,mBAAS,CACjC2B,KAAM,GACNa,SAAS,IAFX,mBAAOC,EAAP,KAAcC,EAAd,KAcA,OATAC,qBAAU,WACR1B,EAAQC,GAAU0B,MAAK,SAACC,GACtBH,EAAS,CACPf,KAAMkB,EACNL,SAAS,SAGZ,CAACtB,IAEGuB,EDb2BK,CAAa5B,GAAjCe,EAAd,EAAQN,KAAca,EAAtB,EAAsBA,QAUtB,OACE,qCACE,oBAAIJ,UAAU,wCAAd,SAAuDlB,IACtDsB,GAAW,mBAAGJ,UAAU,mCAAb,qBAEZ,qBAAKA,UAAU,YAAf,SACE,6BACGH,EAAOJ,KAAI,SAACC,GAAD,OACV,cAAC,EAAD,eAA8BA,GAAZA,EAAIC,eEnBrBgB,EAAe,WAG1B,MAAoC/C,mBAAS,CAAC,YAA9C,mBAAOgD,EAAP,KAAmBjD,EAAnB,KAWA,OACE,qCACE,8CACA,cAAC,EAAD,CAAcA,cAAeA,IAC7B,uBACA,6BACGiD,EAAWnB,KAAI,SAACX,GAAD,OACd,cAAC,EAAD,CAAwBA,SAAUA,GAApBA,Y,MCnBxB+B,IAASC,OAAO,cAAC,EAAD,IAAkBC,SAASC,eAAe,W","file":"static/js/main.0e1e82fe.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nexport const AddCategorys = ({ setCategories }) => {\r\n  //La caja tiene un estado, para saber que esta escribiendo el usuario\r\n  const [inputValue, setInputValue] = useState(\"\");\r\n\r\n  //tenemos que extraer el valor del input, que introduce el usuario\r\n  const handleInputChange = (e) => {\r\n    //inputValue, es la última información que el usuario escribio\r\n    setInputValue(e.target.value);\r\n  };\r\n\r\n  //Como captura el evento intro en React\r\n  const handleSubmit = (e) => {\r\n    //para prevenir el comportamiento por defecto del formulario se usa\r\n    e.preventDefault();\r\n    //Validar\r\n    if (inputValue.trim().length > 2) {\r\n      //como pasamos el setCategories, solo hay que utlizarlo, añadiendo o haciendo referencia a las categorias anteriores, y añadir la nueva con inputValue\r\n      setCategories((cats) => [inputValue, ...cats]);\r\n      setInputValue(\"\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <input type=\"text\" value={inputValue} onChange={handleInputChange} />\r\n    </form>\r\n  );\r\n};\r\n//Para definir los propTypes, es fuera del return\r\nAddCategorys.prototype = {\r\n  setCategories: PropTypes.func.isRequired,\r\n};\r\n","export const getGifs = async (category) => {\r\n  const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(\r\n    category\r\n  )}&limit=10&api_key=kIbCPB1zycD5sQa5Pe65bBNv7fWCd51N`;\r\n\r\n  const resp = await fetch(url);\r\n  console.log(url);\r\n  const { data } = await resp.json(); //la respuesta a la peticion\r\n  const gif = data.map((img) => {\r\n    return {\r\n      id: img.id,\r\n      title: img.title,\r\n      url: img.images?.downsized_medium.url,\r\n    };\r\n  });\r\n  return gif;\r\n};\r\n","import React from \"react\";\r\n\r\nexport const GifGridItem = ({ title, url }) => {\r\n  //   console.log(id, title, url);\r\n  return (\r\n    <div className=\"card animate__animated animate__fadeInDown\">\r\n      <img src={url} alt={title} />\r\n      <p>{title}</p>\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { useFetchGifs } from \"../hooks/useFetchGifs\";\r\nimport { GifGridItem } from \"./GifGridItem\";\r\n\r\nexport const GifGrid = ({ category }) => {\r\n  const { data: images, loading } = useFetchGifs(category);\r\n\r\n  //uso de useState\r\n\r\n  //   useEffect(() => {\r\n  //     getGifs(category) //retorna una promesa\r\n  //       .then((imgs) => setImages(imgs));\r\n  //   }, [category]); //la funcion del useEffect() es para que solo se cargue una vez nuestra peticion, y evitar los bucles infinitos en peticiones a api o BBDD\r\n  //Si la categoria cambia, tendríamos que cargar de nuevo el useEffects, [category]\r\n\r\n  return (\r\n    <>\r\n      <h3 className=\"animate__animated animate__fadeInDown\">{category}</h3>\r\n      {loading && <p className=\"animate__animated animate__flash\">Loading</p>}\r\n\r\n      <div className=\"card-grid\">\r\n        <ol>\r\n          {images.map((img) => (\r\n            <GifGridItem key={img.id} {...img} />\r\n          ))}\r\n        </ol>\r\n      </div>\r\n\r\n      {/* para poder mostar un lista, sabiendo como esta estructura\r\n        hacemos la descontruccion */}\r\n    </>\r\n  );\r\n};\r\n","import { useState, useEffect } from \"react\";\r\nimport { getGifs } from \"../helpers/getGifs\";\r\n\r\nexport const useFetchGifs = (category) => {\r\n  const [state, setState] = useState({\r\n    data: [],\r\n    loading: true,\r\n  });\r\n  //en los customHooks, tambien podemos utilizar los useEfefts\r\n  useEffect(() => {\r\n    getGifs(category).then((imgs) => {\r\n      setState({\r\n        data: imgs,\r\n        loading: false,\r\n      });\r\n    });\r\n  }, [category]);\r\n\r\n  return state; //{data:[], loading:true}\r\n};\r\n","import React, { useState } from \"react\";\r\nimport { AddCategorys } from \"./components/AddCategorys\";\r\nimport { GifGrid } from \"./components/GifGrid\";\r\n\r\nexport const GitExpertApp = () => {\r\n  //const categories = [\"One Punch\", \"Samuria X\", \"Dagron Ball\"];\r\n\r\n  const [categories, setCategories] = useState([\"Pokemon\"]);\r\n  // const handleAdd = () => {\r\n  //   //Agregar un elemento nuevo al array\r\n  //   setCategories([\"Digimon\", ...categories]);\r\n  //   //Otra forma de agregar nuevas categorias seria\r\n  //   /**\r\n  //    * setCategories(cats=>[...cats,'Digimon']), el callback, 1 Arg, sería el estado del anterior y luego regresa el nuevo esado\r\n  //    */\r\n  // };\r\n\r\n  //e paso las categorias al componente hijo(AddCategorys.), con una funcion = {referencia setCategories}\r\n  return (\r\n    <>\r\n      <h2>GitExpertApp</h2>\r\n      <AddCategorys setCategories={setCategories} />\r\n      <hr />\r\n      <ol>\r\n        {categories.map((category) => (\r\n          <GifGrid key={category} category={category} />\r\n        ))}\r\n      </ol>\r\n    </>\r\n  );\r\n};\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { GitExpertApp } from \"./GitExpertApp\";\n\nimport \"./index.css\";\n\nReactDOM.render(<GitExpertApp />, document.getElementById(\"root\"));\n\n//gitExpertApp\n//<h2>\n"],"sourceRoot":""}